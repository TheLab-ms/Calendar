// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "../src/schemas" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}


model Location {
  id         Int     @id @default(autoincrement())
  title      String  @unique
  roomId     String?
  maxSeating Int?
  Event      Event[]
}

model Category {
  id    Int     @id @default(autoincrement())
  title String  @unique
  Event Event[]
}

model Event {
  id        Int @id @default(autoincrement())
  creator   Account @relation(fields: [creatorId], references: [id])
  creatorId String

  title     String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  startTime DateTime
  endTime   DateTime
  allDay    Boolean  @default(false)

  exclusivity Int @default(0)

  minAttendence Int
  maxAttendence Int
  minAge        Int?

  description  String
  specialNotes String?
  reqMaterials String?

  pending  Boolean @default(true)
  approved Boolean @default(false)
}

model Account {
  id        String  @unique @id
  email     String  @unique
  name      String
  events    Event[] 
}
