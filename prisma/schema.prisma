// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/schemas" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  modelCase     = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix   = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id         String  @id @default(uuid())
  title      String  @unique
  roomId     String?
  maxSeating Int?
  Event      Event[]
}

model Category {
  id    String  @id @default(uuid())
  title String  @unique
  Event Event[]
}

model Event {
  id        String  @id @default(uuid())
  creator   Account @relation(fields: [creatorId], references: [id])
  creatorId String

  title String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  startTime DateTime
  endTime   DateTime
  allDay    Boolean  @default(false)

  exclusivity Int @default(0)

  minAttendence Int
  maxAttendence Int
  minAge        Int?

  description  String
  specialNotes String?
  reqMaterials String?

  pending  Boolean @default(true)
  approved Boolean @default(false)
  RSVP     RSVP[]

  discordEventId String?
  googleCalendarEventId String?

}

model Account {
  id     String  @id
  email  String  @unique
  name   String
  events Event[]
  RSVP   RSVP[]
}

model RSVP {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime @default(now())
}
